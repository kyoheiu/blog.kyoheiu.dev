<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>tudurikata - C++</title>
        <link>https://tudurikata.com</link>
        <description>personal notes</description>
        <generator>Zola</generator>
        <language>ja</language>
        <atom:link href="https://tudurikata.com/tags/c/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Wed, 08 Sep 2021 00:00:00 +0000</lastBuildDate>
        <item>
            <title>関数型的に入門するC++</title>
            <pubDate>Wed, 08 Sep 2021 00:00:00 +0000</pubDate>
            <link>https://tudurikata.com/post/getting-started-functional-cpp/</link>
            <guid>https://tudurikata.com/post/getting-started-functional-cpp/</guid>
            <description>&lt;p&gt;C++に興味が出てきて勉強中。参考としているのは&lt;a href=&quot;https:&#x2F;&#x2F;ezoeryou.github.io&#x2F;cpp-intro&#x2F;#%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0&quot;&gt;江添亮の C++入門&lt;&#x2F;a&gt;。わかりやすく、ユーモアもところどころあって楽しい。とりあえずアルゴリズムについて、関数型（というか Haskell）的な視点でまとめておく。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;yi-lan&quot;&gt;一覧&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ezoeryou.github.io&#x2F;cpp-intro&#x2F;#%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0&quot;&gt;アルゴリズム&lt;&#x2F;a&gt;の章で紹介されている各関数は高階関数として捉えると理解が捗る。とくにこの場合、イテレータから説明が続いているので、&lt;code&gt;Foldable a&lt;&#x2F;code&gt;に対して適用される&lt;code&gt;Data.List&lt;&#x2F;code&gt;収録の関数として変換していくととても覚えやすいと思う。&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;for_each -&amp;gt; map || foldr
all_of -&amp;gt; all
any_of -&amp;gt; any
none_of -&amp;gt; !all
find -&amp;gt; elem
find_if -&amp;gt; head . filter f
count -&amp;gt; length . filter (==x)
count_if -&amp;gt; length . filter f
equal -&amp;gt; [a] == [b] || f([a]) == f([b])　 &amp;#x2F;&amp;#x2F;関数をとる場合もある
search -&amp;gt; ???
transform -&amp;gt; map

&amp;#x2F;&amp;#x2F;ラムダ式
[](a x) -&amp;gt; b {...}
\x -&amp;gt; f(x) :: a -&amp;gt; b
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;練習も兼ねて書いてみよう。上が Haskell、下が main 関数で記述した C++（厳密には対応していないので悪しからず）。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;for-each&quot;&gt;for_each&lt;&#x2F;h4&gt;
&lt;pre&gt;&lt;code&gt;map (*2) [1..4]

-----

void f(int x)
{
    x = x * 2;
    std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;;
}

int main()
{
    std::vector&amp;lt;int&amp;gt; v = {1, 2, 3, 4};
    for_each(std::begin(v), std::end(v), f);
}

&amp;#x2F;&amp;#x2F;ラムダ式
for_each(std::begin(v), std::end(v), [](auto x)
             { std::cout &amp;lt;&amp;lt; x * 2 &amp;lt;&amp;lt; &amp;quot;\n&amp;quot;; });
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;all-of&quot;&gt;all_of&lt;&#x2F;h4&gt;
&lt;pre&gt;&lt;code&gt;all (even) [2,4,6,8]

-----

int main()
{
    std::vector&amp;lt;int&amp;gt; v = {2, 4, 6, 8};
    std::cout &amp;lt;&amp;lt; std::boolalpha;
    std::cout &amp;lt;&amp;lt; all_of(std::begin(v), std::end(v), [](auto value)
                        { return value % 2 == 0; });
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;find&quot;&gt;find&lt;&#x2F;h4&gt;
&lt;pre&gt;&lt;code&gt;3 `elem` [1..4] &amp;#x2F;&amp;#x2F; True
5 `elem` [1..4] &amp;#x2F;&amp;#x2F; False

-----

int main()
{
    std::vector&amp;lt;int&amp;gt; v = {2, 4, 6, 8};
    if (std::end(v) == find(std::begin(v), std::end(v), 4))
    {
        std::cout &amp;lt;&amp;lt; &amp;quot;Not found.\n&amp;quot;;
    }
    else
    {
        std::cout &amp;lt;&amp;lt; &amp;quot;Found.\n&amp;quot;;
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;find(first, last, value)&lt;&#x2F;code&gt;の場合、value が見つからなかったときに返るのは last だが、出力時に要素の&lt;code&gt;0&lt;&#x2F;code&gt;と区別がつかなくなってしまうので、&lt;code&gt;std::end(v)&lt;&#x2F;code&gt;との比較でケースを分けている。パターンマッチングでもっとシンプルにしたいが…？&lt;&#x2F;p&gt;
&lt;h4 id=&quot;count&quot;&gt;count&lt;&#x2F;h4&gt;
&lt;pre&gt;&lt;code&gt;(length . filter (==1)) [1,2,1,1,2,1,3]

-----

int main()
{
    std::vector&amp;lt;int&amp;gt; v = {1, 2, 1, 1, 2, 1, 3};
    std::cout &amp;lt;&amp;lt; count(v.begin(), v.end(), 1);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;search&quot;&gt;search&lt;&#x2F;h4&gt;
&lt;pre&gt;&lt;code&gt;import qualified Data.List as L

search :: Eq a =&amp;gt; [a] -&amp;gt; [a] -&amp;gt; Maybe Int
search xs ys =
  case L.elemIndex (head xs) ys of
    Just n -&amp;gt;
      if take (length xs) (drop n ys) == xs
        then Just n
        else (+) &amp;lt;$&amp;gt; Just (n + 1) &amp;lt;*&amp;gt; search xs (drop (n + 1) ys)
    Nothing -&amp;gt; Nothing

-----

int main()
{
    std::vector&amp;lt;int&amp;gt; v1 = {1, 2, 3, 4, 5, 6};
    std::vector&amp;lt;int&amp;gt; v2 = {2, 3, 4};

    std::cout &amp;lt;&amp;lt; *search(v1.begin(), v1.end(), v2.begin(), v2.end());
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;search(first1,last1,first2,last2)&lt;&#x2F;code&gt;は、[first1,last1)の範囲に[first2,last2)があれば、見つかったサブシークエンスの先頭のイテレータを返す関数。微妙に複雑だ。&lt;br &#x2F;&gt;
これを Haskell で実装してみると…。単に「含むかどうか」を&lt;code&gt;Bool&lt;&#x2F;code&gt;で返すなら&lt;code&gt;isInfixOf&lt;&#x2F;code&gt;があるが、最初の要素となると、先頭がマッチするだけでなく、そのあとの並びがきちんと求めるリストと一致しているかどうかを見た上で、&lt;code&gt;drop&lt;&#x2F;code&gt;した数と足していかないといけない。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;c-mian-bai-i&quot;&gt;C++、面白い&lt;&#x2F;h4&gt;
&lt;p&gt;「C++で関数型プログラミングをする」ために書かれた本もいくつかあるようだ。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.manning.com&#x2F;books&#x2F;functional-programming-in-c-plus-plus&quot;&gt;Manning | Functional Programming in C++&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.co.jp&#x2F;dp&#x2F;B07MTBCCV5&quot;&gt;Amazon | Hands-On Functional Programming with C++: An effective guide to writing accelerated functional code using C++17 and C++20 (English Edition) [Kindle edition] by Bolboaca, Alexandru | Hardware | Kindle ストア&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上の Manning の本を読み始めているが、関数合成的（？）なことができるパイプというものがあるらしく、色々できそうで楽しみです。&lt;&#x2F;p&gt;
</description>
        </item>
    </channel>
</rss>
