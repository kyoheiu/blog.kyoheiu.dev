<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>tudurikata - Rust</title>
        <link>https://tudurikata.com</link>
        <description>personal notes</description>
        <generator>Zola</generator>
        <language>ja</language>
        <atom:link href="https://tudurikata.com/tags/rust/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Thu, 25 Nov 2021 00:00:00 +0000</lastBuildDate>
        <item>
            <title>RustプロジェクトのビルドテストをGithub Actionsで行う（Arch Linuxのタグに要注意）</title>
            <pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate>
            <link>https://tudurikata.com/post/arch-docker-gcc/</link>
            <guid>https://tudurikata.com/post/arch-docker-gcc/</guid>
            <description>&lt;p&gt;タイトルの通りなのだが、若干ハマったので記録しておきます。&lt;&#x2F;p&gt;
&lt;p&gt;Rustのプロジェクトにおいて、自分のローカル環境以外でもうまくインストールできるかのテストを行うためにGitHub Actionsを使っている。&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;# .github&amp;#x2F;workflows&amp;#x2F;install_test.yml

name: &amp;#x27;install test&amp;#x27;

on:
  push:
    branches-ignore: &amp;#x27;main&amp;#x27;
    paths-ignore:
      - &amp;#x27;*.md&amp;#x27;

env:
  CARGO_TERM_COLOR: always

jobs:
  ubuntu-install:
    runs-on: ubuntu-latest
    steps:
    - uses: actions&amp;#x2F;checkout@v2
    - name: Install
      run: |
        cargo install --path .
  macos-install:
    runs-on: macos-latest
    steps:
    - uses: actions&amp;#x2F;checkout@v2
    - name: Install
      run: |
        cargo install --path .
  archlinux-install:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    steps:
    - uses: actions&amp;#x2F;checkout@v2
    - name: Install
      run: |
        pacman -Syu --noconfirm
        pacman -S gcc --noconfirm
        pacman -S rustup --noconfirm
        rustup install stable
        rustup default stable
        cargo install --path .
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;jobsは３つ。Ubuntu上・macOS上・Arch Linux上それぞれでのインストールをテストしている。（&lt;code&gt;cargo install --path .&lt;&#x2F;code&gt;が通ればcrates.ioからのインストールも問題ないという認識）&lt;&#x2F;p&gt;
&lt;p&gt;ご覧の通り、UbuntuとmacOSでは特に追加でライブラリをインストールする必要なくパスしているが、archlinux:latestを使った最後のテストでは、&lt;code&gt;gcc&lt;&#x2F;code&gt;と&lt;code&gt;rustup&lt;&#x2F;code&gt;を先にインストールしている。
&lt;code&gt;rustup&lt;&#x2F;code&gt;がarchlinux:latestに含まれていないのは当たり前のことなのでこれは良い。問題なのは&lt;code&gt;gcc&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;gcc&lt;&#x2F;code&gt;を事前インストールしない場合、テスト中に&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;error: linker `cc` not found
  |
  = note: No such file or directory (os error 2)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;とビルドエラーが出てしまう。 &lt;&#x2F;p&gt;
&lt;p&gt;そもそものarchlinux:latestイメージの中に入ってみると、&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;# docker run -it archlinux:latest
[root@0fd34e31306a &amp;#x2F;]# pacman -Qi gcc
warning: database file for &amp;#x27;core&amp;#x27; does not exist (use &amp;#x27;-Sy&amp;#x27; to download)
warning: database file for &amp;#x27;extra&amp;#x27; does not exist (use &amp;#x27;-Sy&amp;#x27; to download)
warning: database file for &amp;#x27;community&amp;#x27; does not exist (use &amp;#x27;-Sy&amp;#x27; to download)
error: package &amp;#x27;gcc&amp;#x27; was not found
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;うーん、やっぱり入ってない。&lt;code&gt;gcc&lt;&#x2F;code&gt;が含まれてないなんて、そんなことある？　と思いながら、テストはパスするのでそのままにしていた。&lt;&#x2F;p&gt;
&lt;p&gt;でもやっぱり引っかかる。そこで、よく&lt;a href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;_&#x2F;archlinux&quot;&gt;公式の説明&lt;&#x2F;a&gt;を読んで見ると…&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Besides &lt;code&gt;base&lt;&#x2F;code&gt; we also provide images for the &lt;code&gt;base-devel&lt;&#x2F;code&gt; package group. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;tagにちゃんと&lt;code&gt;base-devel&lt;&#x2F;code&gt;がある…！　そして&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;latest&lt;&#x2F;code&gt; tag will always match the latest &lt;code&gt;base&lt;&#x2F;code&gt; tag.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;はい、ありがちな&lt;code&gt;base-devel&lt;&#x2F;code&gt;抜け。&lt;br &#x2F;&gt;
何も考えずlatestを使ってはいけないという教訓を得ました。&lt;&#x2F;p&gt;
&lt;p&gt;というわけで冒頭のymlを次のように変更。&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;  archlinux-install:
    runs-on: ubuntu-latest
    container:
      image: archlinux:base-devel
    steps:
    - uses: actions&amp;#x2F;checkout@v2
    - name: Install
      run: |
        pacman -Syu --noconfirm
        pacman -S rustup --noconfirm
        rustup install stable
        rustup default stable
        cargo install --path .
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;データベースの更新はいずれにせよ必要として、&lt;code&gt;gcc&lt;&#x2F;code&gt;の明示的インストールを削除。テストももちろんパス。あースッキリした。&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>felix - a tui file manager written in Rust</title>
            <pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate>
            <link>https://tudurikata.com/post/felix-file-manager/</link>
            <guid>https://tudurikata.com/post/felix-file-manager/</guid>
            <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;felix&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;img.shields.io&#x2F;crates&#x2F;v&#x2F;felix&quot; alt=&quot;crates.io&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A tui file manager with vim-like key mapping, written in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;sample.gif&quot; alt=&quot;sample gif&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;While heavliy inspired by the great &lt;code&gt;vifm&lt;&#x2F;code&gt; and trying to implement its pleasant experience in Rust, at the same time this project focuses on the following points:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;simple and fast&lt;&#x2F;li&gt;
&lt;li&gt;easy to configure how to open files&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;status&quot;&gt;Status&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Linux : works well&lt;&#x2F;li&gt;
&lt;li&gt;MacOS : &lt;em&gt;should&lt;&#x2F;em&gt; work, though some unusual errors may occur&lt;&#x2F;li&gt;
&lt;li&gt;Windows: almost unavailable due to file-name encoding error&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;&#x2F;h2&gt;
&lt;p&gt;Before you do the following, make sure &lt;code&gt;gcc&lt;&#x2F;code&gt; is installed.&lt;&#x2F;p&gt;
&lt;p&gt;from crates.io:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;cargo install felix
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or from GitHub repository:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;git clone https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;kyoheiu&amp;#x2F;felix.git
cd felix
cargo install --path .
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;command&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;fx&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Show items in the current directory.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;fx &amp;lt;directory path&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Show items in the path. Both relative and absolute available.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;key-manual&quot;&gt;Key manual&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Key&lt;&#x2F;th&gt;&lt;th&gt;Explanation&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;j &#x2F; Key Up&lt;&#x2F;td&gt;&lt;td&gt;Go up. If the list exceeds max-row, list &amp;quot;scrolls&amp;quot; before the top of the list.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;k &#x2F; Key Down&lt;&#x2F;td&gt;&lt;td&gt;Go down. If the list exceeds max-row, list &amp;quot;scrolls&amp;quot; before the bottom of the list.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;h &#x2F; Key Left&lt;&#x2F;td&gt;&lt;td&gt;Go to parent directory if exists.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;l &#x2F; Key Right &#x2F; Enter&lt;&#x2F;td&gt;&lt;td&gt;Open file or change directory. Commands for execution can be managed in config file.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;gg&lt;&#x2F;td&gt;&lt;td&gt;Go to the top.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;G&lt;&#x2F;td&gt;&lt;td&gt;Go to the bottom.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;dd&lt;&#x2F;td&gt;&lt;td&gt;Delete and yank item (item will go to the trash directory).&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;yy&lt;&#x2F;td&gt;&lt;td&gt;Yank item. If you yanked other item before, its information is replaced by this one.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;p&lt;&#x2F;td&gt;&lt;td&gt;Put yanked item(s) in the current directory. If item with same name exists, copied item will be renamed with the suffix &amp;quot;_copied&amp;quot;.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;V&lt;&#x2F;td&gt;&lt;td&gt;Switch to select mode, where you can move cursor to select items.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;d (select mode)&lt;&#x2F;td&gt;&lt;td&gt;Delete and yank selected items, and return to normal mode.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;y (select mode)&lt;&#x2F;td&gt;&lt;td&gt;Yank selected items, and return to normal mode.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;t&lt;&#x2F;td&gt;&lt;td&gt;Toggle sort order (by name &amp;lt;-&amp;gt; by modified time). This change remains until the program ends (sort order will be restored as configured).&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:&lt;&#x2F;td&gt;&lt;td&gt;Switch to shell mode (&lt;em&gt;&lt;strong&gt;experimantal&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;). Type command and press Enter to execute it. You can use any command in the displayed directory, but it may fail to execute the command (e.g. &lt;code&gt;cd&lt;&#x2F;code&gt; doesn&#x27;t work for now), and also the display of items may collapse during execution.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;c&lt;&#x2F;td&gt;&lt;td&gt;Switch to rename mode (enter new name and press Enter to rename the item).&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&#x2F;&lt;&#x2F;td&gt;&lt;td&gt;Switch to filter mode (enter keyword and press Enter to go to filtered list).&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Esc&lt;&#x2F;td&gt;&lt;td&gt;Return to normal mode.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:e&lt;&#x2F;td&gt;&lt;td&gt;Reload the current directory. Useful when something goes wrong in filter mode (e.g. no matches) or shell mode.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:empty&lt;&#x2F;td&gt;&lt;td&gt;Empty the trash directory. &lt;strong&gt;Please think twice before using this command.&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:h&lt;&#x2F;td&gt;&lt;td&gt;Show help.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:q &#x2F; ZZ&lt;&#x2F;td&gt;&lt;td&gt;Exit the program.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Note that items moved to the trash directory are prefixed with Unix time (like &lt;code&gt;1633843993&lt;&#x2F;code&gt;) to avoid name conflict. This prefix will be removed when paste.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;settings&quot;&gt;Settings&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;config file&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;$XDG_CONFIG_HOME&#x2F;felix&#x2F;config.toml&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;trash directory&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;$XDG_CONFIG_HOME&#x2F;felix&#x2F;trash&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Default config file, which is &lt;a href=&quot;config.toml&quot;&gt;here&lt;&#x2F;a&gt;, will be created automatically when you launch the program for the first time.&lt;&#x2F;p&gt;
&lt;p&gt;In config.toml, you can set:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;color of directories, files, and symlinks separatively&lt;&#x2F;li&gt;
&lt;li&gt;default key for sorting item list (&amp;quot;Name&amp;quot; or &amp;quot;Time&amp;quot;)&lt;&#x2F;li&gt;
&lt;li&gt;how to open files&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;command-setting&quot;&gt;Command setting&lt;&#x2F;h3&gt;
&lt;p&gt;If you write&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;default = &amp;quot;nvim&amp;quot;

[exec]
feh = [&amp;quot;jpg&amp;quot;, &amp;quot;jpeg&amp;quot;, &amp;quot;png&amp;quot;, &amp;quot;gif&amp;quot;, &amp;quot;svg&amp;quot;]
zathura = [&amp;quot;pdf&amp;quot;]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;then, .jpg, .jpeg, .png, .gif and .svg files are opened by &lt;code&gt;feh &amp;lt;file-name&amp;gt;&lt;&#x2F;code&gt;, .pdf files by &lt;code&gt;zathura &amp;lt;file-name&amp;gt;&lt;&#x2F;code&gt; and others by &lt;code&gt;nvim &amp;lt;file-name&amp;gt;&lt;&#x2F;code&gt; .&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Rust入門ルート</title>
            <pubDate>Sat, 13 Feb 2021 00:00:00 +0000</pubDate>
            <link>https://tudurikata.com/post/beginning-rust/</link>
            <guid>https://tudurikata.com/post/beginning-rust/</guid>
            <description>&lt;p&gt;３、４回の挫折を経てようやく「なんとなくRustわかってきたかな」というところまで来れたので、個人的に効率的と考える入門ルートを紹介してみたい。&lt;&#x2F;p&gt;
&lt;p&gt;結論から書くと、&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;『プログラミング言語Rust入門』を読む&lt;&#x2F;li&gt;
&lt;li&gt;とりあえず書いてみる&lt;&#x2F;li&gt;
&lt;li&gt;実践Rustプログラミング入門』を読む&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;これで実践のじの字まではたどり着ける。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;gong-shi-dokiyumentonituite&quot;&gt;公式ドキュメントについて&lt;&#x2F;h3&gt;
&lt;p&gt;もちろん充実しているし、丁寧な書きぶり・カバーぶりなのでいろいろなところでおすすめされている。でも、前知識なしに＆おおまかな全体像を持たず読もうとするとだいたいトレイトあたりで力尽きる。実際にプログラムを組むためにはそのあとの.iter()やクロージャを形式的にでも分かっていないと厳しい。Rustの場合は、公式ドキュメントはその他の資料で迷子になったときに戻ってくる場所として認識しておいたほうがよいと思う。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-puroguraminguyan-yu-rustru-men&quot;&gt;1. 『プログラミング言語Rust入門』&lt;&#x2F;h3&gt;
&lt;p&gt;C、C++の知識のない人間がRustを始めるにはまずここからがよいと思う。簡潔な語り口と丁寧な説明で、入門書の名前にふさわしい。基本文法や所有権のおおまかな概念理解をすませておくと、先々の言語仕様にも必要以上にひるまずに進めるはず。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-toriaezushu-itemiru&quot;&gt;2. とりあえず書いてみる&lt;&#x2F;h3&gt;
&lt;p&gt;なんとなくいけそうな感じになってきたら、何でもいいから書いてみる。Rustはコンパイラに手取り足取り教えてもらって初めて分かるようになる言語だ。だから言語に最短で慣れるには、エラーを取り除くということをたくさんやる、つまりエラーがいっぱいのコードを書くのがいい。&lt;br &#x2F;&gt;
作りたいものがなかったり、作りたくてもハードルが高すぎる場合は、競技プログラミングの問題を解いてみよう。&lt;br &#x2F;&gt;
AtCoderでもいいが、I&#x2F;Oのことを考えないでとりあえず書いてみたい場合はLeetCodeやProject Eulerがおすすめ。前者は数学以外の問題もたくさんあり、後者はすべて数学の問題になっているという違いはあるけれど、いずれも基本的な配列の操作や制御フローの学習に向いている。特にLeetCodeは以下の点でおすすめ。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ヒントが充実しているし、ユーザー数が多く、ディスカッションもたくさん行われているので、つまずきにくい&lt;&#x2F;li&gt;
&lt;li&gt;わかりやすい難度表示があるのでトライのハードルが低い&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3-shi-jian-rustpuroguraminguru-men&quot;&gt;3. 『実践Rustプログラミング入門』&lt;&#x2F;h3&gt;
&lt;p&gt;雰囲気で書けるようになってきたらこれを読んで写経してみる。ふわっとした知識だったところが整理され、理解が深まる感じがする。用語の説明不足も、ここまできたら許容範囲に収まっているはず。&lt;br &#x2F;&gt;
逆に言うと、雰囲気ででも書けないと、序盤からわからない用語が出てきてつらい気持ちになるはずなので、これで入門するのはおすすめできない。タイトルの入門は「実践的なプログラミングへの入門」であって「文法や基礎知識への入門」ではない。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rustlings&quot;&gt;rustlings&lt;&#x2F;h3&gt;
&lt;p&gt;公式で提供されているRustコードのデバッグ問題集。正直駆け出しにはかなり難度が高いが、『実践Rustプログラミング入門』まで読めたら数問を除いてパスできるようになっているはず。また、雰囲気が分かってきたトピックの穴を洗い出すためにも使える。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ta-yan-yu-tonobi-jiao-ji-shi&quot;&gt;他言語との比較記事&lt;&#x2F;h3&gt;
&lt;p&gt;HaskellとRustの比較記事をいくつか読んだが、Haskellの知識があれば万事うまくいくわけでは全然ないので、足場にしすぎないことが大事。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;zatukurisitadui-ying-guan-xi&quot;&gt;ざっくりした対応関係&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Haskell&lt;&#x2F;th&gt;&lt;th&gt;Rust&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Maybeモナド&lt;&#x2F;td&gt;&lt;td&gt;Option型&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Eitherモナド&lt;&#x2F;td&gt;&lt;td&gt;Result型&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;data&lt;&#x2F;td&gt;&lt;td&gt;struct enum&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;case&lt;&#x2F;td&gt;&lt;td&gt;match&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
</description>
        </item>
    </channel>
</rss>
